#version 400 core

struct Material{
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
};

struct Light{
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

in vec3 fragmentposition;
in vec3 newnormal;

out vec4 color;

uniform vec3 viewposition;
uniform Material material;
uniform Light light;

void main(){

  // ambient
  vec3 ambient = light.ambient * material.ambient;

  // diffuse
  vec3 norm = normalize(newnormal);
  vec3 lightdirection = normalize(light.position - fragmentposition);
  float difference = max(dot(norm, lightdirection), 0.0);

  vec3 diffuse = light.diffuse * (difference * material.diffuse);

  // specular
  vec3 viewdirection = normalize(viewposition - fragmentposition);
  vec3 reflectdirection = reflect(-lightdirection, norm);
  float spec = pow(max(dot(viewdirection, reflectdirection), 0.0), material.shininess);
  vec3 specular = light.specular * (spec * material.specular);

  vec3 result = ambient + diffuse + specular;
  color = vec4(result, 1.0f);

}
