#version 400 core

struct Material{
  sampler2D diffuse;
  sampler2D specular;
  float shininess;
};

struct Light{
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};


in vec3 fragmentposition;
in vec3 newnormal;
in vec2 texturecoords;

out vec4 color;

uniform vec3 viewposition;
uniform Material material;
uniform Light light;

void main(){

  vec3 ambient = light.ambient * vec3(texture(material.diffuse, texturecoords));

  vec3 norm = normalize(newnormal);
  vec3 lightdirection = normalize(light.position - fragmentposition);
  float difference = max(dot(norm, lightdirection), 0.0);

  vec3 diffuse = light.diffuse * difference * vec3(texture(material.diffuse, texturecoords));

  vec3 viewdirection = normalize(viewposition - fragmentposition);
  vec3 reflectdirection = reflect(-lightdirection, norm);
  float spec = pow(max(dot(viewdirection, reflectdirection), 0.0), material.shininess);

  vec3 specular = light.specular * spec * vec3(texture(material.specular, texturecoords));

  color = vec4(ambient + diffuse + specular, 1.0f);

}
